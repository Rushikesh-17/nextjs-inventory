datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  category      Category[]
  products      Product[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id      String    @id @default(cuid())
  name    String    @unique
  products Product[]
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  
}

model Product {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  price       Float
  catagory    Category? @relation(fields: [catagoryId], references: [id], onDelete: Cascade)
  catagoryId  String
  stock       Int
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  lastUpdate  DateTime  @updatedAt
  createdAt   DateTime  @default(now())
  usage       Usage[]
}

model Usage {
  id        String      @id @default(cuid())
  date      DateTime    @default(now())   
  use       use
  quantity  Int         
  product   Product     @relation(fields: [productId], references: [id],onDelete: Cascade)
  productId String
}

enum use  {
  added
  used
  sold
}
